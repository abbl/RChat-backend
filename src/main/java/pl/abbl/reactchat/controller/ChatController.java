package pl.abbl.reactchat.controller;

import java.util.List;
import java.util.Map;

import javax.annotation.PostConstruct;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.RestController;

import pl.abbl.reactchat.callbacks.AbstractCallback;
import pl.abbl.reactchat.model.ChatMessage;
import pl.abbl.reactchat.model.ChatRoom;
import pl.abbl.reactchat.service.AuthenticationService;
import pl.abbl.reactchat.service.ChatRoomsService;

@CrossOrigin
@RestController
@RequestMapping("api")
public class ChatController {
	@Autowired
	private ChatRoomsService chatRoomsService;
	@Autowired
	private AuthenticationService authenticationService;
	
	@PostConstruct
	public void createDefaultChatRoom() {
		String token = authenticationService.createUser("SYSTEM").getResponse();
		chatRoomsService.addChatRoom(token, "#default", "Default channel generated by System");
		chatRoomsService.addMessageToRoom(0, "SYSTEM", "I was generated by very complicated code made by highly intelligent monkeys, don't tell anyone about monkeys.");
	}
	
	@ResponseBody
	@RequestMapping(value = "/chat/createChatRoom", method = RequestMethod.POST)
	public AbstractCallback createChatRoom(@RequestBody Map<String, String> data) {
		return chatRoomsService.addChatRoom(data.get("token"), data.get("roomName"), data.get("roomDesc"));
	}
	
	@ResponseBody
	@RequestMapping("/chat/getChatRoomList")
	public List<ChatRoom> getAllChatRooms() {
		return chatRoomsService.getChatRooms();
	}
	
	@ResponseBody
	@RequestMapping(value = "/chat/chatRoom/getRecentMessages", method = RequestMethod.GET)
	public List<ChatMessage> getRecentChatMessages(@RequestParam("id") long id){
		return chatRoomsService.getRecentChatMessages(id);
	}
	
	@RequestMapping(value = "/chat/chatRoom/addNewMessage", method = RequestMethod.POST)
	public void addNewMessage(@RequestBody Map<String, String> data) {
		if(authenticationService.verifyToken(data.get("token")))
			chatRoomsService.addMessageToRoom(Long.parseLong(data.get("chatRoomId")), authenticationService.getUserName(data.get("token")) ,data.get("message"));
	}
}

